package facts;

import java.awt.Container;
import java.awt.Dimension;
import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.JButton;
import javax.swing.JFrame;




import java.awt.Container;
import java.awt.Insets;
import java.awt.Dimension;

import javax.swing.JButton;
import javax.swing.JFrame;

/*MVC Notes:
https://www.tomdalling.com/blog/software-design/model-view-controller-explained/
	Summary:
	Model View and Controller work best when separated
	Model		- holds data
	View		- loads data independently of the Model
	Controller	- provides model data to view, also performs operations on the data
	
	
https://code.tutsplus.com/tutorials/mvc-for-noobs--net-10488
*/

public class View extends JFrame implements ActionListener{

	   // attributes
	   private View currentView;
	   static JButton b1 = new JButton("Display Fact");

	   // constructors
	   View (){
		   System.out.println("\nView constructor");
	        //Schedule a job for the event-dispatching thread:
	        //creating and showing this application's GUI.
	        javax.swing.SwingUtilities.invokeLater(new Runnable() {
	            public void run() {
	            	createAndShowGUI();
	            }
	        });		   
	   }
	   // getters
	   
	   private void getView(){
	   }
	   // setters
	   
	   private void setView(){
	   }
	   
	   // methods
	    private static void createAndShowGUI() {
	        //Create and set up the window.
	        JFrame frame = new JFrame("AbsoluteLayoutDemo");
	        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

	        //Set up the content pane.
	        addComponentsToPane(frame.getContentPane());

	        //Size and display the window.
	        Insets insets = frame.getInsets();
	        frame.setSize(440,550);
	        frame.setVisible(true);
	    }
	    
	    public static void addComponentsToPane(Container pane) {
	        pane.setLayout(null);

	       

	        pane.add(b1);

	        Insets insets = pane.getInsets();
	        Dimension size = b1.getPreferredSize();
	        b1.setBounds(150 + insets.left, 15 + insets.top,size.width + 50, size.height + 20);
	    }	 
	    
	   public void actionPerformed  (ActionEvent e){
		   System.out.println("\nListener decteded.");
		   // display new fact
           if(e.getSource() == b1)
           {
        	   System.out.println("\nListener decteded.");
           }
	   }
}
